/* Display types:
  Block: Each box will be on the next available line. 
  In-line: remains in line of the surrounding elements. No height or width. 
  In-line Block: Like previous except height and width of the elements are respected. 

Orientation:
  Margin: This changes the amount of space from the edge of the element to the outside. 
  Padding: Directs the amount of space between the middle items and the edge of the box. 
  border: this is the border, between the inside and outside of the box. 

Model:
  Box: This adds the dimensions of the element to the margin and border, so a 100px element with a 20px border and 80px margin makes the total box 200px
  Alternative Box: Makes the absolute size the declared size, so a 100px element stays 100px.
    box-sizing: border-box */

/* Display: Flex 
  This is used on the container, and then the items within will be arranged accordingly. You can also nest this feature. 

Flex: this takes three arguments, and is shorthand for flex-grow, flex-shrink, and flex-basis.
  Flex: 1; is equal to writing 1, 1, 0.
  Flex-Grow: this property will make the flex item this is applied to a multiple in size. For example, 2 would make it twice as wide as another item with the value of 1.
  Flex-Shrink: this property tells us how small an item can get when all of the items in the container add up to more space than the container itself. 1 causes a shrink evenly, while 0 will prevent shrinking. 
  Flex-Basis requires a more intense detail:
    Flex-basis
    flex-basis simply sets the initial size of a flex item, so any sort of flex-growing or flex-shrinking starts from that baseline size. The shorthand value defaults to flex-basis: 0%. The reason we had to change it to auto in the flex-shrink example is that with the basis set to 0, those items would ignore the item’s width, and everything would shrink evenly. Using auto as a flex-basis tells the item to check for a width declaration (width: 250px).
    
    Important note about flex-basis:
    There is a difference between the default value of flex-basis and the way the flex shorthand defines it if no flex-basis is given. The actual default value for flex-basis is auto, but when you specify flex: 1 on an element, it interprets that as flex: 1 1 0. If you want to only adjust an item’s flex-grow you can simply do so directly, without the shorthand. Or you can be more verbose and use the full 3 value shorthand flex: 1 1 auto, which is also equivalent to using flex: auto.
    
    What is flex: auto?
    If you noticed, we mentioned a new flex shorthand flex: auto in the previous note. However we didn’t fully introduce it. flex: auto is one of the shorthands of flex. When auto is defined as a flex keyword it is equivalent to the values of flex-grow: 1, flex-shrink: 1 and flex-basis: auto or to flex: 1 1 auto using the flex shorthand. Note that flex: auto is not the default value when using the flex shorthand despite the name being “auto” which may be slightly confusing at first. You will encounter and learn more about flex: auto and its potential use-cases when reading through the assignment section. */

/* Flex CONTAINER has a property called gap that is really useful for creating space between elements in the flex container.
Flex-wrap: wrap will wrap the items. The default is nowrap, and it will overflow the container. 

Flexbox starts with ideal size, so columns will not be the same size. 
It's all ratios, so shrink of 1 will not make them all the same sizes.
So, Flex-basis of 0 makes all columns the same width, but auto will deal with ideals. Flex basis is very similar to width, but not exactly the same.  */

/* Flex direction: Column vs Row just kind of switches everything. 

The following is a nice way to flip a flex for a smaller screen.
@media  (min-width: 800px) {
  flex-direction: row;
}

justify-content works only when the container has extra space and it moves items in the container. Center, start, and end all kind of work, and put them where you would expect. There's is also space-between and space-around and more importantly, there is space-evenly.

align-items: the default is stretch. flex-start or end will move them up or down if there are smaller items in the container. 
align-self lets you pick a single item that wants to do it's own thing.  */
/* 
https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/
This is an excellent source for envisioning flexbox.

putting flex-min on the child item will prevent overflow in a shrinking container. 
Remember, an item with text can only shrink to the width of the longest word there. 

Use margin and margin: auto to separate elements with extra space as well. 

flex-wrap: wrap; will make it so items will wrap to the next line. 
align-items works the same, just on each row. 
We also have align-content, which will align the newly created rows themselves.  */


=== INTERMEDIATE HTML AND CSS ===

HTML

<html></html> This is the root element. It's at the top of the document. 

Then there's the metadata
<base>

<head></head></head>
  This is basically what stores the basic metadata
<link>
  For gathering content from other files. Use for CSS and Favicons
<script></script>
  This is obviously for JavaScript
<style></style>
  This is where you might want to but some doc specific HTML
<title></title>
  This is what will show up in the browser tab
<meta> 

<body></body>
  Basically everything that's going to be rendered goes in here

There are various specifically named tags like header footer article and more. This also includes hgroup like h1 and h5 etc. 

There are also various text tags that we have seen before. The most important is obviously div, but we have also seen ol, ul, li and others like menu which is basically a ul with a better name and blockquote. 

=== Emmet ===

We've made a shortcut for wrapping code in a tags, alt + a and a shortcut for removing said tags, alt + s.

Here are some important things about emmet. 
  - if you don't specify the tag and only provide and id or classs, it wall automatically assume you want a div. 
  - you can chain by using greater than like in css. div>nav>ul>li*3 for example.
  - putting text in [] will let you add attributes. div[data-selected].
  - putting {} will let you add text. li*3{I'm a list item}.
  - you can count with $. header>nav>ul>li*3{I am list item $} will count. Also, $$ will zero pad your number. 
  - you can create siblings with +. header+main+footer.
  - you can escape out of children with ^. header>nav^main+footer alternatively, you can use (). (header>nav)main+footer is the same as above.


=== SVG ===

SVGs are Scalable Vector Graphics. They can be resized without losing quality, which makes them ideal for web usage. You can also change their qualities through CSS and JS, which is another major positive. 

Icons, backgrounds, layers are all good use cases for SVGs.

What's the difference between SVG and a normal image? Well an SVG uses math to determine its shape while a normal "raster" image uses a pixel grid to determine how the image looks. This is why is can scale so well. 

SVGs are actually comprised of XML, which is a bit similar to HTML which means their source can be editied. 

xmlns - This is saying what kind of xml we are working with. Some browsers need this to function

viewBox - This is essentially the size of the SVG canvas, and will determind where the inner pieces fall. 

<circle>, <rect>, <path>, and <text> - These are the core building blocks of SVG. You can tell what they are based on the names for the most part. 

fill and stroke are attributes that can be changed via CSS. 

There are two methods of implementing SVGs. Link and inline. The advantage to linking is the code is much more readable and will not slow the page on load. As a drawback, its properties can not be accessed for use with JS. In line looks messy and is slow, but you can edit the attributes. 

=== TABLES ===

these are created with <table></table>
tr are rows, th are the headings, and td are the data

<table>
  <tr>
    <th>Heading One</th>
    <th>Hading Two</th>
  </tr>
  <tr>
    <td>Data one</td>
    <td>Date two</td>
  </tr>
</table>

you can also add colors
<colgroup>
  <col />
  <col style="background-color: yellow />
</colgroup>

Pick up here next time: 
https://developer.mozilla.org/en-US/docs/Learn/HTML/Tables/Advanced