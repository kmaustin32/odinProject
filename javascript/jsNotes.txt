Javascript Primitives

Variables:
    let (and var, technically): This is the general way to declare a variable. 
    const: These are for immutable variables, like the hex of a color or the amount of time to load page. 
        names for const: Do all CAPS for variables that were known before like color.
            Use camelCase for those unknown, like normal var.

Javascript Primitives:
Numbers:
    These are normal numbers that basic operations can be performed on. This includes BOTH INTEGERS AND FLOATS.
    There are special Numbers that get their own names. 
        NaN (Not a Number), Infinity, and -Infinity.
        NaN is basically a failed computation. If NaN is present anywhere in a math formula, the result will also be NaN, with the exception being NaN ** 0 = 1

BigInt:
    JS doesn't have the space to store integers larger than (2^53-1) (thatâ€™s 9007199254740991), or less than -(2^53-1) for negatives.
    Adding a n to the end of an integer will make it a BigInt. 

Strings:
    Strings are characters between 'quotes', "double quotes", or `backticks`.
    Remember template strings? Use backticks to embed variables in a string. `Hello ${varName}, Welcome back!` is a good example.
    Template literals respect new lines, all the others require \n.
    To embed quotes, you can either do another option or escape:
        'He said, "Hello."' or "He said, \"Hello.\""

Booleans:
    These are basically true or false. 

null:
    This is just a falsey nothing. Nothing or empty. 

undefined:
    Basically means that a value is not assigned. For example if I don't say let name = "Ezra" but call name, it will be undefined. 

Objects and Symbols:
    
Use typeof x to check type.
    To convert types: String(123) to convert num to string and Number('123') to convert to number. 

For String Methods, See introJs.js Second assignment.

=== COMAPRISONS ===

< <= > >= - These are exactly what they are in math. 
= - this is how to assign a variable
== this is how to check if two elements are equal
!= this is "not equals, without ligatures, ! = 

When doing a string comparison:
    As long as each letter in the equivalent position is the same, there's no problem and we move to the next letter. When there's a difference:
        Letters later in the alphabet are "greater".
            Strings of numbers looks at the first letter and compares, so '2' > '12'
        Additional letters make a string greater.

Different type comparisons:
    JS will convert a string of numbers to actual numbers. 
    true == 1, and false == 0

Strict equality:
    == can't actually tell the difference between false and 0.
    === doesn't do a type conversion, it's exact equals.
    !== is "not exactly equals" and is ! = = 

null and undefined:
    null == undefined: true
    null === undefined: false
    for < and > null becomes 0 and undefined NaN

=== if, else if, else, switch ===
    These are pretty self explanatory. Remember the order in which they are written matters. 

=== Logical Operators ===

|| OR
    returns true when any of the given options are true and false when all of the given options are false.
        This can also be used to find the truthy value. It will evaluate left to right and return the first truthy value. If no values are truthy, it will return the final value.  
&& AND 
    basically opposite of OR. returns false unless all given options are true. 
        Finds first falsy value and returns it. If all values are truthy, it returns the final value. 
            && HAS HIGHER PRECEDENCE THAN OR

This article says not to use && to replace if statements. 
Other sources seem to like it. That is, instead of

if (x == 0) alert('number is zero');
(x == 0) && alert('number is zero');

!  NOT
    converts to boolean and then flips. 
!! 
    This returns the truth value.
?? NULLISH Coalescing 

=== Functions ===

function name (args) {
    stuff in here
}

OR ANON

(function () {
    stuff in here
})

OR ARROW

(event) => {
    stuff in here
}

OR SINGLE LINE return (no parens)

event => event.num * 2
    See example in JS doc

=== 